'use strict';

const bigInt = require('big-integer');

// Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

// 2^2 = 4, 2^3 = 8, 2^4 = 16, 2^5 = 32
// 3^2 = 9, 3^3 = 27, 3^4 = 81, 3^5 = 243
// 4^2 = 16, 4^3 = 64, 4^4 = 256, 4^5 = 1024
// 5^2 = 25, 5^3 = 125, 5^4 = 625, 5^5 = 3125
// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

// How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100 ?

const generatePowers = (largestBase, largestPower) => {
  const powerSet = new Set();
  for (let base = 2; base <= largestBase; base++){
    for (let power = 2; power <= largestPower; power++){
      let calculatedNumber = bigInt(base).pow(power);
      if (calculatedNumber.isSmall){
        powerSet.add(`${calculatedNumber.value}`);
      } else {
        let numberString = '';
        while (calculatedNumber.value.length){
          let currentDigits = `${calculatedNumber.value.pop()}`;
          if (currentDigits.length !== 7){
            let currentDigitsArr = currentDigits.split('');
            while (currentDigitsArr.length !== 7){
              currentDigitsArr.unshift('0');
            }
            currentDigits = currentDigitsArr.join('');
          }
          numberString += currentDigits;
        }
        const trimZeros = numberString.split('');
        while (trimZeros[0] === '0'){
          trimZeros.shift();
        }
        numberString = trimZeros.join('');
        powerSet.add(numberString);
      }
    }
  }
  return powerSet.size;
};

console.log(generatePowers(100, 100));