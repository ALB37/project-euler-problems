'use strict';

// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

// Triangle	 	Tn = n(n + 1) / 2	 	1, 3, 6, 10, 15, ...
// Pentagonal	 	Pn = n(3n−1) / 2	 	1, 5, 12, 22, 35, ...
// Hexagonal	 	Hn = n(2n−1)	 	1, 6, 15, 28, 45, ...
// It can be verified that T285 = P165 = H143 = 40755.

// Find the next triangle number that is also pentagonal and hexagonal.

const generateTriangleNumbers = limit => {
  const triangleNumbers = [];
  for (let n = 1; n < limit; n++){
    const nthTriangleNumber = (n * (n + 1)) / 2;
    triangleNumbers.push(nthTriangleNumber);
  }
  return triangleNumbers;
};

const generatePentagonalNumbers = limit => {
  const pentagonalNumbers = [];
  for (let n = 1; n < limit; n++){
    const nthPentagonalNumber = (n * ((3 * n) - 1)) / 2;
    pentagonalNumbers.push(nthPentagonalNumber);
  }
  return pentagonalNumbers;
};

const generateHexagonalNumbers = limit => {
  const hexagonalNumbers = [];
  for (let n = 1; n < limit; n++){
    const nthHexagonalNumber = n * ((2 * n) - 1);
    hexagonalNumbers.push(nthHexagonalNumber);
  }
  return hexagonalNumbers;
};

const findCommonPolygonalNumbers = limit => {
  const triangleNumbers = generateTriangleNumbers(limit);
  const pentagonalNumbers = generatePentagonalNumbers(limit);
  const hexagonalNumbers = generateHexagonalNumbers(limit);
  const commonPolygonalNumbers = [];
  for (let triangleNumber of triangleNumbers){
    if (pentagonalNumbers.includes(triangleNumber) && hexagonalNumbers.includes(triangleNumber)){
      commonPolygonalNumbers.push(triangleNumber);
    }
  }
  return commonPolygonalNumbers;
};

console.log(findCommonPolygonalNumbers(100000));