'use strict';

// Pentagonal numbers are generated by the formula, Pn = n(3n−1) / 2. The first ten pentagonal numbers are:

// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

// It can be seen that P4 + P7 = 22 + 70 = 92 = P8.However, their difference, 70 − 22 = 48, is not pentagonal.

// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = | Pk − Pj | is minimised; what is the value of D ?

const generatePentagonalNumbers = limit => {
  const pentagonalNumbers = [];
  for (let n = 1; n < limit; n++){
    const nthPentagonalNumber = (n * ((3 * n) - 1)) / 2;
    pentagonalNumbers.push(nthPentagonalNumber);
  }
  return pentagonalNumbers;
};

// Brute force solution, checks all of the smallest differences first
// as soon as the condition is met, the difference is returned.
// The algorithm below could be further optimized, as there are unnecessary checks occuring.

const minimisedPentagonalDifference = limit => {
  const pentagonalNumbers = generatePentagonalNumbers(limit);
  for (let n = 1; n < (limit / 2); n++){
    for (let index in pentagonalNumbers){
      if (Number(index) === pentagonalNumbers.length - n - 1) break;
      const currentPentagonal = pentagonalNumbers[index];
      const nextPentagonal = pentagonalNumbers[Number(index) + n];
      const pairSum = currentPentagonal + nextPentagonal;
      if (pairSum > pentagonalNumbers[pentagonalNumbers.length - 1]) break;
      const pairDifference = nextPentagonal - currentPentagonal;
      if (pentagonalNumbers.includes(pairSum) && pentagonalNumbers.includes(pairDifference)){
        return pairDifference;
      }
    }
  }
};

console.log(minimisedPentagonalDifference(100000));