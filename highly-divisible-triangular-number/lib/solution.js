'use strict';

// The sequence of triangle numbers is generated by adding the natural numbers.So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

// 1: 1
// 3: 1, 3
// 6: 1, 2, 3, 6
// 10: 1, 2, 5, 10
// 15: 1, 3, 5, 15
// 21: 1, 3, 7, 21
// 28: 1, 2, 4, 7, 14, 28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors ?

const listFactors = number => {
  const step = number % 2 === 0 ? 1 : 2;
  const factorSet = new Set();
  for (let value = 1; value < Math.floor(Math.sqrt(number)); value += step){
    if (number % value === 0){
      factorSet.add(value);
      factorSet.add(number / value);
    }
  }
  return factorSet;
};

const triangleNumber = (number, previousTriangleNumber) => {
  return number + previousTriangleNumber;
};

const firstTriangularNumberWithCertainAmountOfDivisors = numberOfDivisors => {
  let currentNumber = 1;
  let lastTriangleNumber = 0;
  while (currentNumber < Infinity){
    let currentTriangleNumber = triangleNumber(currentNumber, lastTriangleNumber);
    if (listFactors(currentTriangleNumber).size > numberOfDivisors){
      return currentTriangleNumber;
    }
    currentNumber++;
    lastTriangleNumber = currentTriangleNumber;
  }
};

console.log(firstTriangularNumberWithCertainAmountOfDivisors(500));